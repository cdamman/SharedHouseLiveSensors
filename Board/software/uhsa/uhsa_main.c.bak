/* 
 * "Small Hello World" example. 
 * 
 * This example prints 'Hello from Nios II' to the STDOUT stream. It runs on
 * the Nios II 'standard', 'full_featured', 'fast', and 'low_cost' example 
 * designs. It requires a STDOUT  device in your system's hardware. 
 *
 * The purpose of this example is to demonstrate the smallest possible Hello 
 * World application, using the Nios II HAL library.  The memory footprint
 * of this hosted application is ~332 bytes by default using the standard 
 * reference design.  For a more fully featured Hello World application
 * example, see the example titled "Hello World".
 *
 * The memory footprint of this example has been reduced by making the
 * following changes to the normal "Hello World" example.
 * Check in the Nios II Software Developers Manual for a more complete 
 * description.
 * 
 * In the SW Application project (small_hello_world):
 *
 *  - In the C/C++ Build page
 * 
 *    - Set the Optimization Level to -Os
 * 
 * In System Library project (small_hello_world_syslib):
 *  - In the C/C++ Build page
 * 
 *    - Set the Optimization Level to -Os
 * 
 *    - Define the preprocessor option ALT_NO_INSTRUCTION_EMULATION 
 *      This removes software exception handling, which means that you cannot 
 *      run code compiled for Nios II cpu with a hardware multiplier on a core 
 *      without a the multiply unit. Check the Nios II Software Developers 
 *      Manual for more details.
 *
 *  - In the System Library page:
 *    - Set Periodic system timer and Timestamp timer to none
 *      This prevents the automatic inclusion of the timer driver.
 *
 *    - Set Max file descriptors to 4
 *      This reduces the size of the file handle pool.
 *
 *    - Check Main function does not exit
 *    - Uncheck Clean exit (flush buffers)
 *      This removes the unneeded call to exit when main returns, since it
 *      won't.
 *
 *    - Check Don't use C++
 *      This builds without the C++ support code.
 *
 *    - Check Small C library
 *      This uses a reduced functionality C library, which lacks  
 *      support for buffering, file IO, floating point and getch(), etc. 
 *      Check the Nios II Software Developers Manual for a complete list.
 *
 *    - Check Reduced device drivers
 *      This uses reduced functionality drivers if they're available. For the
 *      standard design this means you get polled UART and JTAG UART drivers,
 *      no support for the LCD driver and you lose the ability to program 
 *      CFI compliant flash devices.
 *
 *    - Check Access device drivers directly
 *      This bypasses the device file system to access device drivers directly.
 *      This eliminates the space required for the device file system services.
 *      It also provides a HAL version of libc services that access the drivers
 *      directly, further reducing space. Only a limited number of libc
 *      functions are available in this configuration.
 *
 *    - Use ALT versions of stdio routines:
 *
 *           Function                  Description
 *        ===============  =====================================
 *        alt_printf       Only supports %s, %x, and %c ( < 1 Kbyte)
 *        alt_putstr       Smaller overhead than puts with direct drivers
 *                         Note this function doesn't add a newline.
 *        alt_putchar      Smaller overhead than putchar with direct drivers
 *        alt_getchar      Smaller overhead than getchar with direct drivers
 *
 */

#include "sys/alt_stdio.h"
#include "system.h"
#include "altera_avalon_pio_regs.h"
#include <stdio.h>

#define UHSA_ESCAPE '['
#define UHSA_ESCAPE_END ']'

unsigned char gpo = 0xBF; // SDA.OE = 0
unsigned char miso_mask = 0x04;
#define SCL_mask 0x01
#define SCL_mask_not 0xFE
#define SDA_mask 0x02
#define SDA_OE_mask 0x40
#define SDA_OE_mask_not 0xBF

unsigned char i2c_active=0;

int temp_delay;

void i2c_delay() {
	temp_delay=10;
	do {
		temp_delay-=1;
	} while (temp_delay);
}

char i2c_io(unsigned char data) {
	char retval;
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, data);
	retval = IORD_ALTERA_AVALON_PIO_DATA(PIO_0_BASE);
	i2c_delay();
	return ((retval >> 1 ) & 0x01);
}

void set_scl(char value) {
	if (value) {
		gpo |= SCL_mask;
	} else {
		gpo &= SCL_mask_not;
	}
	i2c_io(gpo);
}

void i2c_clk() {
	set_scl(1);
	set_scl(0);
}

void set_sda(char value) {
	if (value & 0x01) {
		gpo &= SDA_OE_mask_not;
	} else {
		gpo |= SDA_OE_mask;
	}
	i2c_io(gpo);
}

unsigned char get_sda() {
	char retval;
	retval = IORD_ALTERA_AVALON_PIO_DATA(PIO_0_BASE);
	return ((retval >> 1 ) & 0x01);
}

unsigned char i2c_recv1() {
	unsigned char retval;
	set_sda(1);
	retval = get_sda();
	i2c_clk();
	return retval;
}

unsigned char i2c_recv4() {
	unsigned char retval;
	set_sda(1);
	retval  = get_sda(); i2c_clk();
	retval <<=1; retval |= get_sda(); i2c_clk();
	retval <<=1; retval |= get_sda(); i2c_clk();
	retval <<=1; retval |= get_sda(); i2c_clk();
	return retval;
}

void i2c_xmit4(unsigned char value) {
	//
	set_sda(value >> 3); i2c_clk();
	set_sda(value >> 2); i2c_clk();
	set_sda(value >> 1); i2c_clk();
	set_sda(value     ); i2c_clk();
}

void i2c_xmit1(unsigned char value) {
	set_sda(value     ); i2c_clk();
}

unsigned char spi_xfer4(unsigned char value) {
	unsigned char retval;

	retval = 0;
	//
	gpo &= 0xFC; if (value & 0x08) { gpo |= 0x02; }	IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, gpo);
	if (IORD_ALTERA_AVALON_PIO_DATA(PIO_0_BASE) & miso_mask) { retval |= 0x08; }
	gpo |= 0x01;                                 	IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, gpo);
	//
	gpo &= 0xFC; if (value & 0x04) { gpo |= 0x02; }	IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, gpo);
	if (IORD_ALTERA_AVALON_PIO_DATA(PIO_0_BASE) & miso_mask) { retval |= 0x04; }
	gpo |= 0x01;                                 	IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, gpo);
	//
	gpo &= 0xFC; if (value & 0x02) { gpo |= 0x02; }	IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, gpo);
	if (IORD_ALTERA_AVALON_PIO_DATA(PIO_0_BASE) & miso_mask) { retval |= 0x02; }
	gpo |= 0x01;                                 	IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, gpo);
	//
	gpo &= 0xFC; if (value & 0x01) { gpo |= 0x02; }	IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, gpo);
	if (IORD_ALTERA_AVALON_PIO_DATA(PIO_0_BASE) & miso_mask) { retval |= 0x01; }
	gpo |= 0x01;                                 	IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, gpo);

	return retval;
}

unsigned char spi_xfer4x(unsigned char value) {
	unsigned char retval;

	retval = 0;
	//
	gpo &= 0xFD; if (value & 0x08) { gpo |= 0x02; }	IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, gpo); // output MOSI
	if (IORD_ALTERA_AVALON_PIO_DATA(PIO_0_BASE) & miso_mask) { retval |= 0x08; }                  // capture MISO
	gpo &= 0xFC;                                    IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, gpo); // toggle SCK ?
	gpo |= 0x01;                                 	IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, gpo);

	//
	gpo &= 0xFD; if (value & 0x04) { gpo |= 0x02; }	IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, gpo);
	if (IORD_ALTERA_AVALON_PIO_DATA(PIO_0_BASE) & miso_mask) { retval |= 0x04; }
	gpo &= 0xFC;                                    IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, gpo); // toggle SCK ?
	gpo |= 0x01;                                 	IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, gpo);

	//
	gpo &= 0xFD; if (value & 0x02) { gpo |= 0x02; }	IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, gpo);
	if (IORD_ALTERA_AVALON_PIO_DATA(PIO_0_BASE) & miso_mask) { retval |= 0x02; }
	gpo &= 0xFC;                                    IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, gpo); // toggle SCK ?
	gpo |= 0x01;                                 	IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, gpo);

	//
	gpo &= 0xFD; if (value & 0x01) { gpo |= 0x02; }	IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, gpo);
	if (IORD_ALTERA_AVALON_PIO_DATA(PIO_0_BASE) & miso_mask) { retval |= 0x01; }
	gpo &= 0xFC;                                    IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, gpo); // toggle SCK ?
	gpo |= 0x01;                                 	IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, gpo);


	return retval;
}


void print_hex_char(int val) {
	char tempchar;
	tempchar = (val & 0x0f) + '0'; // 0..9 => 0x30..0x39
	if (tempchar > '9') {
		tempchar += 39;
	}
	alt_putchar(tempchar);
}

int main() {
	alt_putstr("UHSA R2.0\n\r");
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, gpo);

	char c = 0;	// First char received
	char c0;
	unsigned int b;	// c converted to hex nibble
	char in_escape = 0;
	char is_nibble = 0;
	char done = 0;
	unsigned int channel = 0;
	unsigned char temp;
	unsigned int temp2;
	unsigned char led = 1;

	/* Event loop never exits. */
	while (1) {
		if (done) {
			c0 = 0;
			done = 0;
		} else {
			c0 = c;
		}
		is_nibble = 0;
		b = 0;

		IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE + 1, led ? gpo | 0x100 : gpo);
		led = !led;

		c = alt_getchar();
		if (('0' <= c && c <= '9') || ('a' <= c && c <= 'f')) {
			is_nibble = 1;
			b = c - '0';
		}

		// Escape processing first
		if (in_escape) {
			if (c == UHSA_ESCAPE_END) {
				in_escape = 0;
				done = 1;
				// processing done
			} else if (c == UHSA_ESCAPE) {
				in_escape = 0;
				//done = 1;
			} else if (is_nibble && c0 == UHSA_ESCAPE) {
				channel = b;
			}
		}

		if (!in_escape) {
			// Process normal stream after escape processing block
			if (c == UHSA_ESCAPE && c0 != UHSA_ESCAPE) {
				in_escape = 1;
				// processing done
			} else if (!done) { // Process normally here we are not inside escape sequence
				switch (channel) {
				case 0:
					if (is_nibble) {
						spi_xfer4(b);
					} else {
						switch (c) {
						case '.':
							temp = spi_xfer4(0);
							print_hex_char(temp);
							break;
						case '<':
							// Activate Chip Select
							gpo &= 0xF7;
							IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, gpo);
							break;
						case '>':
							// De-activate Chip Select
							gpo |= 0x08;
							IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, gpo);
							break;
						}
					}
					break;
				case 1:
					if (is_nibble) {
						spi_xfer4(b);
					} else {
						switch (c) {
						case '.':
							temp = spi_xfer4(0xf);
							print_hex_char(temp);
							break;
						case '<':
							// Activate Chip Select
							gpo &= 0xDF;
							IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, gpo);
							break;
						case '>':
							// De-activate Chip Select
							gpo |= 0x20;
							IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, gpo);
							break;
						}
					}
					break;
				case 2:
					if (is_nibble) {
						spi_xfer4x(b);
					} else {
						switch (c) {
						case '.':
							temp = spi_xfer4x(0);
							print_hex_char(temp);
							break;
						case '<':
							// Activate Chip Select
							gpo &= 0x7F;
							IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, gpo);
							break;
						case '>':
							// De-activate Chip Select
							gpo |= 0x80;
							IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, gpo);
							break;
						}
					}
					break;
				case 6:
					if (is_nibble) {
						i2c_xmit4(b);
					} else {
						switch (c) {
						case '.':
							temp = i2c_recv4();
							print_hex_char(temp);
							break;
						case 'k':
							temp = i2c_recv1();
							print_hex_char(temp);
							break;
						case 'K':
							temp = i2c_recv1();
							break;
						case 'm':
							i2c_xmit1(0);
							break;
						case 'M':
							i2c_xmit1(1);
							break;
						/*case 'r':
							temp = get_sda();
							print_hex_char(temp);
							break;
						case 's':
							set_scl(0);
							break;
						case 'S':
							set_scl(1);
							break;
						case 't':
							set_sda(0);
							break;
						case 'T':
							set_sda(1);
							break;*/
						case '<':
							// Send I2C Start or repeated start
							if (i2c_active) {
								// Repeated Start
								// SCL <= 1
								set_scl(1);
								// SDA <= 0 - this is START condition
								set_sda(0);
								set_scl(0);
							} else {
								i2c_active = 1;
								// SCL <= 1
								set_scl(1);
								// SDA <= 0 - this is START condition
								set_sda(0);
								set_scl(0);
							}
							break;
						case '>':
							i2c_active = 0;
							// Send I2C STOP, safe implementation
							// SCL = 0
							set_scl(0); // SCL should be 0 already..
							// SDA <= 0 make sure SDA is LOW
							set_sda(0);
							// SCL <= 1
							set_scl(1);
							// SDA <= 1 - this is STOP condition
							set_sda(1);
							break;
						}
					}
					break;
				case 7:
					IOWR_ALTERA_AVALON_PIO_DATA(PIO_1_BASE, b);
					temp2 = IORD_ALTERA_AVALON_PIO_DATA(PIO_1_BASE);
					print_hex_char((temp2 >> 12) & 0xF);
					print_hex_char((temp2 >> 8) & 0xF);
					print_hex_char((temp2 >> 4) & 0xF);
					print_hex_char((temp2 >> 0) & 0xF);
					break;

				default:
					// undefined/unused channel
					//alt_putchar('?');
					alt_putchar(c);
				}
				if (c == UHSA_ESCAPE) {
					done = 1;
				}
			}
		}
	};

	return 0;
}
